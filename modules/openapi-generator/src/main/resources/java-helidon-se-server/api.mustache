package {{package}};

{{#imports}}import {{import}};
{{/imports}}

import java.util.Collections;
import java.util.Optional;
import java.util.logging.Logger;

import io.helidon.common.GenericType;
import io.helidon.common.reactive.Single;
import io.helidon.config.Config;
import io.helidon.webserver.Routing;
import io.helidon.webserver.ServerRequest;
import io.helidon.webserver.ServerResponse;
import io.helidon.webserver.Service;

{{#operations}}
public abstract class {{classname}} implements Service {

    protected static final Logger LOGGER = Logger.getLogger({{classname}}.class.getName());
    protected final Config config;

    public {{classname}}(Config config) {
        this.config = config;
    }

    /**
    * A service registers itself by updating the routing rules.
    * @param rules the routing rules.
    */
    @Override
    public void update(Routing.Rules rules) {
{{#operation}}
        rules.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}("{{{path}}}", {{!
        }}{{#bodyParam}}{{#isModel}}Handler.create({{{dataType}}}.class, {{/isModel}}this::{{{operationId}}}){{#isModel}}){{/isModel}}{{/bodyParam}}{{!
        }}{{^bodyParam}}this::{{{operationId}}}){{/bodyParam}};
{{/operation}}
    }
{{!
}}  {{#isFormParamsFunctions}}{{>formParamsFunctions}}{{/isFormParamsFunctions}}

{{#operation}}
    /**
    * {{httpMethod}} {{{path}}}{{#summary}} : {{.}}{{/summary}}.
    * @param request the server request
    * @param response the server response{{#allParams}}{{#isBodyParam}}{{#isModel}}
    * @param {{paramName}} {{{description}}}{{^description}}{{paramName}}{{/description}} {{/isModel}}{{/isBodyParam}}{{/allParams}}
    */
    public void {{{operationId}}}(ServerRequest request, ServerResponse response{{#allParams}}{{#isBodyParam}}{{#isModel}}, {{{dataType}}} {{paramName}}{{/isModel}}{{/isBodyParam}}{{/allParams}}) {
        {{>formParamsInitial}}
        Single.create({{^hasParams}}Single.empty(){{/hasParams}}{{#hasParams}}{{^bodyParam}}{{#formParams}}{{#-first}}formSingle{{/-first}}{{/formParams}}{{^formParams}}Single.empty(){{/formParams}}{{/bodyParam}}{{#bodyParam}}{{^isModel}}request.content().as(new GenericType<{{{dataType}}}>() { }){{/isModel}}{{#isModel}}Single.empty(){{/isModel}}{{/bodyParam}}{{/hasParams}})
            .thenAccept({{#bodyParam}}{{^isModel}}{{paramName}}{{/isModel}}{{#isModel}}val{{/isModel}}{{/bodyParam}}{{^bodyParam}}val{{/bodyParam}} -> {
                {{#allParams}}{{> queryParams }}{{> pathParams }}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{>cookieParams}}{{/allParams}}
                handle{{#lambda.titlecase}}{{{operationId}}}{{/lambda.titlecase}}(request, response{{#allParams}}, {{paramName}}{{/allParams}});
            })
            .exceptionally(throwable -> handleError(request, response, throwable));
    }

    abstract void handle{{#lambda.titlecase}}{{{operationId}}}{{/lambda.titlecase}}(ServerRequest request, ServerResponse response{{#allParams}}, {{>dataType}} {{paramName}}{{/allParams}});

{{/operation}}
    abstract Void handleError(ServerRequest request, ServerResponse response, Throwable throwable);{{!
}}{{#isFormCollector}}
//+++++++++++++isFormCollector++++++++++++{{/isFormCollector}}{{!
}}{{#isByteCollector}}
//+++++++++++++isByteCollector++++++++++++{{/isByteCollector}}
}
{{/operations}}
