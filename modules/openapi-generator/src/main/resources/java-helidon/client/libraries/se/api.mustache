{{>licenseInfo}}
package {{package}};

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.function.Consumer;

{{#jsonb}}import jakarata.json.bind.JsonbBuilder;{{/jsonb}}
{{#jackson}}import com.fasterxml.jackson.databind.ObjectMapper;{{/jackson}}

import io.helidon.common.http.MediaType;
import io.helidon.common.reactive.Single;
import io.helidon.config.Config;
import io.helidon.media.common.MediaSupport;
{{#jsonb}}import io.helidon.media.jsonb.JsonbSupport;{{/jsonb}}
{{#jackson}}import io.helidon.media.jackson.JacksonSupport;{{/jackson}}
import io.helidon.webclient.WebClientRequestBuilder;
import io.helidon.webclient.WebClientRequestHeaders;
import io.helidon.webclient.WebClientResponse;

import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.Pair;

{{#imports}}import {{import}};
{{/imports}}

{{#appName}}
/**
 * {{{appName}}}
 *
 {{#appDescription}}
 * <p>{{{.}}}
 {{/appDescription}}
 */
{{/appName}}
public class {{classname}} {

  private final ApiClient apiClient;

  public {{classname}}(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

{{#operations}}
{{#operation}}
  {{#summary}}
 /**
  * {{summary}}
  {{#notes}}
  * {{.}}
  {{/notes}}
  {{#allParams}}
  * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/isContainer}}{{/required}}
  {{/allParams}}
  * @return {@code Single<WebClientResponse>} containing status and (if relevant) response content
  {{#isDeprecated}}
  * @deprecated
  {{/isDeprecated}}
  */
  {{/summary}}
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public Single<WebClientResponse> {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) {
    {{#requiredParams}}
    Objects.requireNonNull({{paramName}}, "Required parameter '{{paramName}}' not specified");
    {{/requiredParams}}
    WebClientRequestBuilder webClientRequestBuilder = {{operationId}}RequestBuilder({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
    return {{operationId}}Submit(webClientRequestBuilder{{#allParams}}, {{paramName}}{{/allParams}});
  }

  /**
   * Creates a {@code WebClientRequestBuilder} for the {{operationId}} operation.
   * Optional customization point for subclasses.
   *
   {{#allParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/isContainer}}{{/required}}
   {{/allParams}}
   * @return WebClientRequestBuilder for {{operationId}}
   */
  protected WebClientRequestBuilder {{operationId}}RequestBuilder({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) {
    WebClientRequestBuilder webClientRequestBuilder = apiClient.webClient()
            .method("{{httpMethod}}");

    {{#hasQueryParams}}
    {{javaUtilPrefix}}List<Pair> queryParams = new {{javaUtilPrefix}}ArrayList<>();
    {{#queryParams}}
    {{#collectionFormat}}
    queryParams.addAll(ApiClient.parameterToPairs("{{{collectionFormat}}}", "{{baseName}}", {{paramName}}));
    {{/collectionFormat}}
    {{^collectionFormat}}
    {{#isDeepObject}}
    if ({{paramName}} != null) {
      {{#items.vars}}
      queryParams.addAll(ApiClient.parameterToPairs("{{baseName}}", {{paramName}}.{{getter}}()));
      {{/items.vars}}
    }
    {{/isDeepObject}}
    {{^isDeepObject}}
    queryParams.addAll(ApiClient.parameterToPairs("{{baseName}}", {{paramName}}));
    {{/isDeepObject}}
    {{/collectionFormat}}
    {{/queryParams}}
    queryParams.forEach(p -> webClientRequestBuilder.queryParam(p.getName(), p.getValue()));
    {{/hasQueryParams}}
    {{#hasHeaderParams}}
    WebClientRequestHeaders headers = webClientRequestBuilder.headers();
    {{#headerParams}}
    if ({{paramName}} != null) {
      headers.put("{{baseName}}", {{paramName}}.toString());
    }
    {{/headerParams}}
    {{/hasHeaderParams}}
    {{#hasCookieParams}}
    webClientRequestBuilder.headers(){{#cookieParams}}
            .add("Cookie", "{{baseName}}"={{{paramName}}}){{#-last}};{{/-last}}
    {{/cookieParams}}
    {{/hasCookieParams}}

    {{! Switch delimiters for baseName so we can use curly braces in the string as literals and not have mustache
        interpret them, then switch back. }}
    String path = "{{{path}}}"{{#pathParams}}
            .replace({{=<% %>=}}"{<%baseName%>}"<%={{ }}=%>, ApiClient.urlEncode({{{paramName}}}.toString())){{^-last}}
    {{/-last}}{{/pathParams}};
    webClientRequestBuilder.path(path);

    {{#bodyParam}}
    webClientRequestBuilder.contentType(MediaType.APPLICATION_JSON);
    {{/bodyParam}}
    webClientRequestBuilder.accept(MediaType.APPLICATION_JSON);

    return webClientRequestBuilder;
  }

  /**
   * Initiates the request for the {{operationId}} operation.
   * Optional customization point for subclasses.
   *
   * @param webClientRequestBuilder the request builder to use for submitting the request
   {{#allParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/isContainer}}{{/required}}
   {{/allParams}}
   * @return Single<WebClientResponse> for the submitted request
   */
  protected Single<WebClientResponse> {{operationId}}Submit(WebClientRequestBuilder webClientRequestBuilder{{#allParams}}, {{{dataType}}} {{paramName}}{{/allParams}}) {
    {{#hasFormParams}}
    StringJoiner formParams = new StringJoiner("&")
    {{#formParams}}
            .add("{{{baseName}}}=" + {{paramName}}){{#-last}};{{/-last}}
    {{/formParams}}
    {{/hasFormParams}}
    return webClientRequestBuilder
            .submit({{#bodyParam}}{{paramName}}{{/bodyParam}}{{#hasFormParams}}formParams.toString(){{/hasFormParams}});
  }


{{/operation}}
{{/operations}}
}
